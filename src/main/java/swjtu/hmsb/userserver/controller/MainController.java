package swjtu.hmsb.userserver.controller;

import com.google.gson.JsonObject;
import io.milvus.client.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;

import swjtu.hmsb.userserver.dao.UserRepository;
import swjtu.hmsb.userserver.milvus.MyMilvus;
import swjtu.hmsb.userserver.dao.User;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Controller
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    private MyMilvus myMilvus = new MyMilvus();


    @GetMapping("/signup")
    public String greetingForm(Model model) {
        model.addAttribute("user", new User());
        return "signup";
    }

    @GetMapping("/result")
    public String resultForm(Model model) {
        model.addAttribute("user", new User());
        return "result";
    }

    @PostMapping("/signup")
    public @ResponseBody String SignUpSubmit(@ModelAttribute User user) {

        myMilvus.ConnectMilvus();
        User newUser = new User();
        List<Float> vectorList;
        List<List<Float>> vectors = new ArrayList<>();
        vectorList = User.StringToVector(user.getVector());
        vectors.add(vectorList);
        // add name
        newUser.setName(user.getName());
        //newUser.setVector(user.getVector());
        //System.out.println(user.getVector());
        //System.out.println(vectorList);

        Long vectorId = myMilvus.InsertVector(vectors);
        //System.out.println(id.get(0));
        newUser.setVectorId(vectorId);
        userRepository.save(newUser);
        return "saved";
    }


    @PostMapping("/result")
    public @ResponseBody String search(@ModelAttribute User user) {
        //将获取的字符串转为list<Float>
        myMilvus.ConnectMilvus();
        List<Float> vectorList = User.StringToVector(user.getVector());
        List<List<Float>> vectors = new ArrayList<>();
        vectors.add(vectorList);
        Long resultId = myMilvus.SearchVector(vectors);
        //Long resultId = 1424L;

        if(resultId != 0L){
            User resultrUser = userRepository.findUserByVectorId(resultId);
            return resultrUser.toString();
        }
        else
            return "未找到该用户";
    }


    @GetMapping("/all")
    public String getMessage(Model model) {
        Iterable<User> users = userRepository.findAll();
        model.addAttribute("users", users);
        return "all";
    }



}
